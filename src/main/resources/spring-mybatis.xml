<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- mybatis:scan 会将com.dishesMS.mapper包里的所有接口当作mapper配置，之后可以自动引入mapper类
    <mybatis:scan base-package="com.dishesMS.mapper" />-->
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.dishesMS" />

    <!--
     1.shiro 配置SecurityManager
     -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManeger" />
        <!--<property name="sessionMode" value="native" />  -->
        <property name="realm" ref="jdbcRealm" />
    </bean>
    <!--
    2.shiro 配置CacheManager
    -->
    <bean id="cacheManeger" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!--
        <property name="cacheManager" ref="ehCacheManager" />
        -->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
    </bean>
    <!--
    3.shiro 配置Realm 直接实现了org.apache.shiro.realm.Realm 接口的bean
    -->
    <bean id="jdbcRealm" class="com.dishesMS.shiro.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5" />
                <property name="hashIterations" value="1024" />
                <property name="storedCredentialsHexEncoded" value="true" />
            </bean>
        </property>
    </bean>
    <!--
    4.配置 LifecycleBeanPostProcessor 可以自定的来调用配置在Spring IOC容器中shiro bean 的生命周期方法
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <!--
    5.启用 IOC 容器使用shiro的注解，但必须在配置了LifecycleBeanPostProcessor之后才能使用
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor" />
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    <!--
    6.配置shiro filter
    6.1 id 必须和web.xml文件的DelegatingFilterProxy 的<filter-name> 一致
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/login.jsp" />
        <property name="successUrl" value="/system/main" />
        <property name="unauthorizedUrl" value="/login.jsp" />
        <!--
         配置哪些页面需要受保护
         以及访问这些页面需要的权限
         1）anon 可以被匿名访问
         2）authc 必须认证（即登录）后才能访问
         3）logout 登出
         -->
        <property name="filterChainDefinitions">
            <value>
                #/favicon.ico = anon
                #/logo.png = anon
                #/login.jsp = anon
               #/staff/login = anon
                #/jsp/moban/* = anon
                /staff/logout = logout
                # allow WebStart to pull the jar for the swing app:
                #/*.jar = anon
                #everything else requires authentication:
                #/** = authc
            </value>
        </property>
    </bean>

    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:jdbc.properties" />
    </bean>
    <!--
    <context:property-override location="classpath:jdbc.properties"/>-->
    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" lazy-init="true" >

        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />
        <property name="password" value="${password}" />
        <property name="initialSize" value="${initialSize}" />
        <property name="maxActive" value="${maxActive}" />
        <property name="maxIdle" value="${maxIdle}" />
        <property name="minIdle" value="${minIdle}" />
        <property name="maxWait" value="${maxWait}" />

    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapper.xml文件 -->
        <property name="mapperLocations" value="classpath:com/dishesMS/mapper/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dishesMS.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 文件上传  -->
    <bean id="MultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 上传文件大小上限，单位为字节  -->
        <property name="maxUploadSize">
            <value>10485760</value>
        </property>
        <!-- 请求的编码格式，必须和jsp的pageEncoding属性一致，以便正确读取表单的内容，默认是ISO-8895-1 -->
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
    </bean>

</beans>